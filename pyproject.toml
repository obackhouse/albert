[project]
name = "albert"
version = "0.0.1"
description = "Toolbox for manipulating, optimising, and generating code for Einstein summations"
keywords = [
    "einstein", "summation",
    "einsum",
    "tensor", "contraction",
    "quantum", "chemistry",
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
]
dependencies = [
    "networkx>=2.6.2",
]

[build-system]
requires = [
    "setuptools>=61.0.0",
]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
dev = [
    "black>=22.6.0",
    "isort>=5.10.1",
    "flake8>=3.8.4",
    "flake8-pyproject>=1.2.3",
    "flake8-bugbear>=23.0.0",
    "flake8-docstrings>=1.6.0",
    "unimport>=1.0.0",
    "isort>=5.0.0",
    "coverage[toml]>=5.5.0",
    "pytest>=6.2.4",
    "pytest-cov>=4.0.0",
    "mypy>=1.8.0",
    "pdaggerq@git+https://github.com/edeprince3/pdaggerq.git@master",  # For testing
]
drudge = [
    "sympy>=1.9",
    "drudge@git+https://github.com/obackhouse/drudge.git@master",
    "gristmill@git+https://github.com/obackhouse/gristmill.git@master",
    "dummyrdd@git+https://github.com/tschijnmo/DummyRDD.git@master",
]

[tool.black]
line-length = 100
target-version = [
    "py39",
]
include = "albert"
exclude = """
/(
    | __pycache__
    | .git
)/
"""

[tool.isort]
atomic = true
profile = "black"
line_length = 100
src_paths = [
    "albert",
]
skip_glob = [
    "*/__pycache__/*",
    "*/__init__.py",
]

[tool.flake8]
max-line-length = 100
max-doc-length = 100
ignore = [
    "E203",  # Whitespace before ':'
    "E731",  # Do not assign a lambda expression, use a def
    "E741",  # Ambiguous variable name
    "W503",  # Line break before binary operator
    "D400",  # First line should end with a period
    "B007",  # Loop control variable not used within the loop body
    "B019",  # Use of `functools.lru_cache` or `functools.cache` ...
    "B027",  # Empty method in an abstract base class wit no abstract decorator
]
per-file-ignores = [
    "__init__.py:E402,W605,F401,F811,D103",
    "tests/*:D101,D103,D104",
]
docstring-convention = "google"
count = true
include = '\.pyi?$'
exclude = """
/(
    | __pycache__
    | .git
)/
"""

[tools.mypy]
python_version = "3.10"
exclude = """
/(
    | __pycache__
    | .git
)/
"""

[[tool.mypy.overrides]]
module = "albert.*"
strict = true
ignore_missing_imports = true
disallow_subclassing_any = false
implicit_reexport = true
warn_unused_ignores = false
allow_redefinition = true

[[tool.mypy.overrides]]
module = "sympy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "drudge.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gristmill.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "networkx.*"
ignore_missing_imports = true

[tool.coverage.run]
branch = true
source = [
    "albert",
]
omit = []

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "raise util.ModelNotImplemented",
    "if __name__ == .__main__.:",
]

[tool.coverage.html]
directory = "cov_html"
